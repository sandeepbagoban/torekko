{"ast":null,"code":"var _jsxFileName = \"/Users/yousseftouggani/Desktop/Projet/Torekko/torekko/src/Pages/test.js\",\n    _s = $RefreshSig$();\n\n/* import React from 'react'\nimport { Component, Fragment } from 'react';\nimport Web3Connect from \"web3connect\";\nimport Web3 from \"web3\";\nimport Portis from \"@portis/web3\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport Fortmatic from \"fortmatic\";\n\nclass test extends Component {\n    \n    render() {\n\n        \n        return (\n            <div style={{margin:'130px 0px'}}>\n            <Web3Connect.Button\n            providerOptions={{\n              portis: {\n                package: Portis,\n                options: {\n                    id: \"PORTIS_ID\", // required\n                    network: \"mainnet\" // optional\n                }\n              },\n              walletconnect: {\n                package: WalletConnectProvider, // required\n                options: {\n                  infuraId: \"INFURA_ID\" // required\n                }\n              },\n              fortmatic: {\n                package: Fortmatic, // required\n                options: {\n                  key: \"FORTMATIC_KEY\" // required\n                }\n              }\n            }}\n            onConnect={(provider) => {\n              const web3 = new Web3(provider); // add provider to web3\n            }}\n            onClose={() => {\n              console.log(\"Web3Connect Modal Closed\"); // modal has closed\n            }}\n          />\n          </div>\n            /*<div style={{margin:'130px 0px'}}>\n                <button>Connnect</button>\n                <button>Disconnnect</button>\n            </div>\n            \n          \n        );\n      }\n    \n}\n\nexport default test;*/\nimport React from 'react';\nimport { useWallet, UseWalletProvider } from 'use-wallet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Test() {\n  _s();\n\n  const wallet = useWallet();\n  const blockNumber = wallet.getBlockNumber();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), wallet.status === 'connected' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Account: \", wallet.account]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Balance: \", wallet.balance]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => wallet.reset(),\n        children: \"disconnect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Connect:\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => wallet.connect(),\n        children: \"MetaMask\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => wallet.connect('frame'),\n        children: \"Frame\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => wallet.connect('portis'),\n        children: \"Portis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n} // Wrap everything in <UseWalletProvider />\n\n\n_s(Test, \"i+/qxb0flJRE8MgvazOGMkNRtsk=\", false, function () {\n  return [useWallet];\n});\n\n_c = Test;\nexport default (() => /*#__PURE__*/_jsxDEV(UseWalletProvider, {\n  chainId: 1,\n  connectors: {\n    // This is how connectors get configured\n    portis: {\n      dAppId: 'my-dapp-id-123-xyz'\n    }\n  },\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 89,\n  columnNumber: 3\n}, this));\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["/Users/yousseftouggani/Desktop/Projet/Torekko/torekko/src/Pages/test.js"],"names":["React","useWallet","UseWalletProvider","Test","wallet","blockNumber","getBlockNumber","status","account","balance","reset","connect","portis","dAppId"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,iBAApB,QAA6C,YAA7C;;;;AAEA,SAASC,IAAT,GAAgB;AAAA;;AACd,QAAMC,MAAM,GAAGH,SAAS,EAAxB;AACA,QAAMI,WAAW,GAAGD,MAAM,CAACE,cAAP,EAApB;AAEA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGF,MAAM,CAACG,MAAP,KAAkB,WAAlB,gBACC;AAAA,8BACE;AAAA,gCAAeH,MAAM,CAACI,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,gCAAeJ,MAAM,CAACK,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAQ,QAAA,OAAO,EAAE,MAAML,MAAM,CAACM,KAAP,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,gBAOC;AAAA,0CAEE;AAAQ,QAAA,OAAO,EAAE,MAAMN,MAAM,CAACO,OAAP,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAQ,QAAA,OAAO,EAAE,MAAMP,MAAM,CAACO,OAAP,CAAe,OAAf,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAQ,QAAA,OAAO,EAAE,MAAMP,MAAM,CAACO,OAAP,CAAe,QAAf,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA,kBADF;AAmBD,C,CAED;;;GAzBSR,I;UACQF,S;;;KADRE,I;AA0BT,gBAAe,mBACb,QAAC,iBAAD;AACE,EAAA,OAAO,EAAE,CADX;AAEE,EAAA,UAAU,EAAE;AACV;AACAS,IAAAA,MAAM,EAAE;AAAEC,MAAAA,MAAM,EAAE;AAAV;AAFE,GAFd;AAAA,yBAOE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAPF;AAAA;AAAA;AAAA;AAAA,QADF","sourcesContent":["/* import React from 'react'\nimport { Component, Fragment } from 'react';\nimport Web3Connect from \"web3connect\";\nimport Web3 from \"web3\";\nimport Portis from \"@portis/web3\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport Fortmatic from \"fortmatic\";\n\nclass test extends Component {\n    \n    render() {\n\n        \n        return (\n            <div style={{margin:'130px 0px'}}>\n            <Web3Connect.Button\n            providerOptions={{\n              portis: {\n                package: Portis,\n                options: {\n                    id: \"PORTIS_ID\", // required\n                    network: \"mainnet\" // optional\n                }\n              },\n              walletconnect: {\n                package: WalletConnectProvider, // required\n                options: {\n                  infuraId: \"INFURA_ID\" // required\n                }\n              },\n              fortmatic: {\n                package: Fortmatic, // required\n                options: {\n                  key: \"FORTMATIC_KEY\" // required\n                }\n              }\n            }}\n            onConnect={(provider) => {\n              const web3 = new Web3(provider); // add provider to web3\n            }}\n            onClose={() => {\n              console.log(\"Web3Connect Modal Closed\"); // modal has closed\n            }}\n          />\n          </div>\n            /*<div style={{margin:'130px 0px'}}>\n                <button>Connnect</button>\n                <button>Disconnnect</button>\n            </div>\n            \n          \n        );\n      }\n    \n}\n\nexport default test;*/\n\nimport React from 'react'\nimport { useWallet, UseWalletProvider } from 'use-wallet'\n\nfunction Test() {\n  const wallet = useWallet()\n  const blockNumber = wallet.getBlockNumber()\n\n  return (\n    <>\n      <h1>Wallet</h1>\n      {wallet.status === 'connected' ? (\n        <div>\n          <div>Account: {wallet.account}</div>\n          <div>Balance: {wallet.balance}</div>\n          <button onClick={() => wallet.reset()}>disconnect</button>\n        </div>\n      ) : (\n        <div>\n          Connect:\n          <button onClick={() => wallet.connect()}>MetaMask</button>\n          <button onClick={() => wallet.connect('frame')}>Frame</button>\n          <button onClick={() => wallet.connect('portis')}>Portis</button>\n        </div>\n      )}\n    </>\n  )\n}\n\n// Wrap everything in <UseWalletProvider />\nexport default () => (\n  <UseWalletProvider\n    chainId={1}\n    connectors={{\n      // This is how connectors get configured\n      portis: { dAppId: 'my-dapp-id-123-xyz' },\n    }}\n  >\n    <App />\n  </UseWalletProvider>\n)\n "]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/yousseftouggani/Desktop/Projet/Torekko/torekko/src/hooks/Timer.js\";\nimport { Component, Fragment } from 'react';\nimport './Timer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Timer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      remaining: {\n        jours: 0,\n        heures: 0,\n        minutes: 0,\n        secondes: 0\n      },\n      isExpired: false\n    };\n\n    this.setDate = () => {\n      const {\n        targetDate,\n        targetTime\n      } = this.props,\n            // Get todays date and time\n      now = new Date().getTime(),\n            // Set the date we're counting down to\n      countDownDate = new Date(targetDate + \" \" + targetTime).getTime(); // Find the distance between now and the count down date\n\n      this.distance = countDownDate - now; // target date and time is less than current date and time\n\n      if (this.distance < 0) {\n        clearInterval(this.timer);\n        this.setState({\n          isExpired: true\n        });\n      } else {\n        this.setState({\n          remaining: {\n            days: Math.floor(this.distance / (1000 * 60 * 60 * 24)),\n            hours: Math.floor(this.distance % (1000 * 60 * 60 * 24) / (1000 * 60 * 60)),\n            minutes: Math.floor(this.distance % (1000 * 60 * 60) / (1000 * 60)),\n            seconds: Math.floor(this.distance % (1000 * 60) / 1000)\n          },\n          isExpired: false\n        });\n      }\n    };\n\n    this.counter = () => {\n      this.timer = setInterval(() => {\n        this.setDate();\n      }, 1000);\n    };\n  }\n\n  componentDidMount() {\n    this.setDate();\n    this.counter();\n  }\n\n  render() {\n    const {\n      remaining,\n      isExpired\n    } = this.state,\n          {\n      targetDate,\n      targetTime\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: !isExpired && targetDate && targetTime ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"counter\",\n        children: Object.entries(remaining).map((el, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"entry\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"entry-value\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"count top curr flipTop\",\n              children: el[1] + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"count top next\",\n              children: el[1]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"count bottom next flipBottom\",\n              children: el[1]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"count bottom curr\",\n              children: el[1] + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 19\n            }, this)]\n          }, el[1], true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"entry-title\",\n            children: el[0].toUpperCase()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 17\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"alert-danger\",\n        children: \"Expired\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Timer;","map":{"version":3,"sources":["/Users/yousseftouggani/Desktop/Projet/Torekko/torekko/src/hooks/Timer.js"],"names":["Component","Fragment","Timer","state","remaining","jours","heures","minutes","secondes","isExpired","setDate","targetDate","targetTime","props","now","Date","getTime","countDownDate","distance","clearInterval","timer","setState","days","Math","floor","hours","seconds","counter","setInterval","componentDidMount","render","Object","entries","map","el","i","toUpperCase"],"mappings":"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","sourcesContent":["import { Component, Fragment } from 'react';\n\nimport './Timer.css'\n\nclass Timer extends Component {\n  state = {\n    remaining: {\n      jours: 0,\n      heures: 0,\n      minutes: 0,\n      secondes: 0\n    },\n    isExpired: false\n  };\n  // used to set and clear interval\n  timer;\n  // used to calculate the distance between \"current date and time\" and the \"target date and time\"\n  distance;\n\n  componentDidMount() {\n    this.setDate();\n    this.counter();\n  }\n\n  setDate = () => {\n    const { targetDate, targetTime } = this.props,\n      // Get todays date and time\n      now = new Date().getTime(),\n      // Set the date we're counting down to\n      countDownDate = new Date(targetDate + \" \" + targetTime).getTime();\n    \n    // Find the distance between now and the count down date\n    this.distance = countDownDate - now;\n    \n    // target date and time is less than current date and time\n    if (this.distance < 0) {\n      clearInterval(this.timer);\n      this.setState({ isExpired: true });\n    } else {\n      this.setState({\n        remaining: {\n          days: Math.floor(this.distance / (1000 * 60 * 60 * 24)),\n          hours: Math.floor(\n            (this.distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n          ),\n          minutes: Math.floor((this.distance % (1000 * 60 * 60)) / (1000 * 60)),\n          seconds: Math.floor((this.distance % (1000 * 60)) / 1000)\n        },\n        isExpired: false\n      });\n    }\n  };\n\n  counter = () => {\n    this.timer = setInterval(() => {\n      this.setDate();\n    }, 1000);\n  };\n\n  render() {\n    const { remaining, isExpired } = this.state,\n    {targetDate, targetTime} = this.props;\n    \n    return (\n      <Fragment>\n        {!isExpired && targetDate && targetTime ? (\n          <div className=\"counter\">\n            {Object.entries(remaining).map((el, i) => (\n              <div key={i} className=\"entry\">\n                <div key={el[1]} className=\"entry-value\">\n                  <span className=\"count top curr flipTop\">{el[1] + 1}</span>\n                  <span className=\"count top next\">{el[1]}</span>\n                  <span className=\"count bottom next flipBottom\">{el[1]}</span>\n                  <span className=\"count bottom curr\">{el[1] + 1}</span>\n                </div>\n                <div className=\"entry-title\">{el[0].toUpperCase()}</div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <p className=\"alert-danger\">Expired</p>\n        )}\n      </Fragment> \n    );\n  }\n}\n\nexport default Timer;\n"]},"metadata":{},"sourceType":"module"}